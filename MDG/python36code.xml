<?xml version="1.0" encoding="windows-1252"?>
<MDG.Technology version="1.0"><Documentation id="77" name="python36code" version="1" notes="python36code"/><CodeModules><CodeModule language="Python36" notes=""><CodeTemplates><RefData version="1.0" exporter="EA.25">
					<DataSet name="Python36_Code_Template" table="t_template" filter="TemplateType='#TemplateType#' and TemplateName='#TemplateName#' and Style='#Style#'"><DataRow><Column name="TemplateID" value="{722C473C-1AF9-4099-BC34-F67C3C40354B}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="File"/><Column name="Template" value="#######################################################&#xA;# &#xA;# %fileName%&#xA;# Python implementation of the %elemType% %className%&#xA;# Generated by Enterprise Architect&#xA;# Created on:      %eaDateTime%&#xA;%if classAuthor != &quot;&quot;%&#xA;# Original author: %classAuthor%&#xA;%endIf%&#xA;# &#xA;#######################################################&#xA;&#xA;%ImportSection%\n&#xA;%list=&quot;Namespace&quot; @separator=&quot;\n\n&quot; @indent=&quot;&quot;%&#xA;"/></DataRow><DataRow><Column name="TemplateID" value="{568654FC-0D6E-4b24-A431-5021C3117252}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Namespace"/><Column name="Template" value="%list=&quot;Namespace&quot; @separator=&quot;\n\n&quot;%&#xA;%list=&quot;Class&quot; @separator=&quot;\n\n&quot;%&#xA;"/></DataRow><DataRow><Column name="TemplateID" value="{A676E74C-EB87-4578-BFF1-EE4C71A2DE7B}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Class"/><Column name="Template" value="%ClassDeclaration%&#xA;%ClassNotes%&#xA;%ClassBody%&#xA;"/></DataRow><DataRow><Column name="TemplateID" value="{E2D2033D-B915-48e0-B81B-A1689BB1D574}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Class Notes"/><Column name="Template" value="%PI=&quot;&quot;%&#xA;%if genOptGenComments != &quot;T&quot;%&#xA;%endTemplate%&#xA;$notes = %REPLACE(classNotes, &quot;\n&quot;, &quot;\n   &quot;)%&#xA;%if $notes != &quot;&quot;%&#xA;    %qt%%qt%%qt%&#xA;$notes = %WRAP_COMMENT($notes, genOptWrapComment, &quot;&quot;, &quot;    &quot;)%&#xA;%TRIM($notes)%\n&#xA;    %qt%%qt%%qt%&#xA;%endIf%&#xA;"/></DataRow><DataRow><Column name="TemplateID" value="{10C516A0-220B-4668-A4EB-4B8D3FA08D27}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Class Base"/><Column name="Template" value="%classBaseName%"/></DataRow><DataRow><Column name="TemplateID" value="{21573925-E0F6-4768-B2AD-2C6BF8B4B488}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Class Interface"/><Column name="Template" value="%ClassBase%"/></DataRow><DataRow><Column name="TemplateID" value="{CE018ADC-4BCC-443c-B5F7-C8FB43A35A08}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Class Body"/><Column name="Template" value="$attr=%list=&quot;Attribute&quot; @separator=&quot;\n&quot; @indent=&quot;    &quot;%&#xA;$ops=%list=&quot;Operation&quot; @separator=&quot;\n\n&quot; @indent=&quot;    &quot;%&#xA;$iclasses=%list=&quot;InnerClass&quot; @separator=&quot;\n\n&quot; @indent=&quot;    &quot;%&#xA;%if $iclasses != &quot;&quot;%&#xA;$iclasses\n&#xA;%endIf%&#xA;$attr&#xA;$ops&#xA;%if $attr == &quot;&quot; and $ops == &quot;&quot; and $iclasses == &quot;&quot;%&#xA;    pass&#xA;%endIf%&#xA;"/></DataRow><DataRow><Column name="TemplateID" value="{EB0B5483-65B7-4113-AE6A-AD6075C5A6E9}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Class Declaration"/><Column name="Template" value="$dec=%REPLACE(classTag:&quot;decorators&quot;,&quot;@&quot;,&quot;\n@&quot;)%&#xA;%TRIM($dec)%&#xA;class %className%%ClassInherits%:&#xA;"/></DataRow><DataRow><Column name="TemplateID" value="{A8676DF2-369C-42b2-B157-307138D52F83}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Class Inherits"/><Column name="Template" value="%PI=&quot;&quot;%&#xA;$bases=%list=&quot;ClassBase&quot; @separator=&quot;, &quot;%&#xA;$interfaces=%list=&quot;ClassInterface&quot; @separator=&quot;, &quot;%&#xA;%if $bases != &quot;&quot; and $interfaces != &quot;&quot;%&#xA;($bases, $interfaces)&#xA;%elseIf $bases != &quot;&quot;%&#xA;($bases)&#xA;%elseIf $interfaces != &quot;&quot;%&#xA;($interfaces)&#xA;%endIf%&#xA;"/></DataRow><DataRow><Column name="TemplateID" value="{681298BE-AEC2-4da4-A292-BBAECA07989F}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Attribute"/><Column name="Template" value="%if attInitial != &quot;&quot;%&#xA;%AttributeNotes%&#xA;%PI=&quot;&quot;%&#xA;%AttributeDeclaration%&#xA;%endIf%&#xA;"/></DataRow><DataRow><Column name="TemplateID" value="{F9B05005-E8CC-4b71-9B71-D3D613F4AC79}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Attribute Notes"/><Column name="Template" value="%if genOptGenComments != &quot;T&quot;%&#xA;%endTemplate%&#xA;%WRAP_COMMENT(attNotes, genOptWrapComment, &quot;&quot;, &quot;# &quot;)%&#xA;"/></DataRow><DataRow><Column name="TemplateID" value="{35B07C7A-5EE8-41b3-91EE-DC1AB8D7B559}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Attribute Declaration"/><Column name="Template" value="%PI=&quot;&quot;%&#xA;%if attScope == &quot;Private&quot;%&#xA;__&#xA;%endIf%&#xA;%attName% = %attInitial%&#xA;"/></DataRow><DataRow><Column name="TemplateID" value="{10031C86-E986-404d-A72A-F43B0F835970}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Import"/><Column name="Template" value="$package = %importPackagePath%&#xA;$file = %importFileName%&#xA;%if $file != &quot;&quot;%&#xA;$imports = %list=&quot;ImportImpl&quot; @separator=&quot;,&quot; $package == importPackagePath and $file == importFileName%&#xA;$pos = %FIND($file, &quot;.py&quot;)%&#xA;%if $pos != &quot;-1&quot;%&#xA;$file=%LEFT($file,$pos)%&#xA;%else%&#xA;$file=%importClassName%&#xA;%endIf%&#xA;%else%&#xA;$imports = %ImportImpl%&#xA;$file = %importClassName%&#xA;%endIf%&#xA;$imports = %REMOVE_DUPLICATES($imports,&quot;,&quot;)%&#xA;$imports = %REPLACE($imports, &quot;,&quot;, &quot;, &quot;)%&#xA;%PI=&quot; &quot;%&#xA;%if $package!= &quot;&quot;%&#xA;from $package.$file&#xA;%endIf%&#xA;import $imports&#xA;&#xA;"/></DataRow><DataRow><Column name="TemplateID" value="{07AA91D3-B0B0-4e6e-98E5-F3FCC9549E9F}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Import Impl"/><Column name="Template" value="%importClassName%"/></DataRow><DataRow><Column name="TemplateID" value="{2BC84C81-49E0-40fd-B503-CCEB33C1317A}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Import Section"/><Column name="Template" value="$imports = %fileImports%&#xA;$imports += %fileHeaders%&#xA;$imports += %list=&quot;Import&quot; @separator=&quot;\n&quot; importFromAggregation == &quot;T&quot; or importFromAssociation == &quot;T&quot; or importFromAtt == &quot;T&quot; or importFromGeneralization == &quot;T&quot; or importFromMeth == &quot;T&quot; or importFromParam == &quot;T&quot; or importFromRealization == &quot;T&quot; and importInFile != &quot;T&quot;%&#xA;%REMOVE_DUPLICATES($imports, &quot;\n&quot;)%&#xA;"/></DataRow><DataRow><Column name="TemplateID" value="{F650B2F3-BE18-4387-92DC-3DEA85325ACF}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Linked Attribute"/><Column name="Template" value="%LinkedAttributeNotes%&#xA;%LinkedAttributeDeclaration%&#xA;"/></DataRow><DataRow><Column name="TemplateID" value="{85B0DFA7-3929-4d1a-9F1B-D43B070118D1}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Linked Attribute Notes"/><Column name="Template" value="%if genOptGenComments != &quot;T&quot;%&#xA;%endTemplate%&#xA;%WRAP_COMMENT(linkAttNotes, genOptWrapComment, &quot;&quot;, &quot;# &quot;)%&#xA;"/></DataRow><DataRow><Column name="TemplateID" value="{64BA6081-1B4F-47c0-990B-E34D776C0CA9}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Linked Attribute Declaration"/><Column name="Template" value="%PI=&quot;&quot;%&#xA;%if linkAttAccess == &quot;Private&quot;%&#xA;__&#xA;%endIf%&#xA;%if linkAttRole != &quot;&quot;%&#xA;%linkAttRole%&#xA;%else%&#xA;%REPLACE(genOptDefaultAssocAttName,&quot;$LinkClass&quot;,linkAttName)%&#xA;%endIf%&#xA;= %linkAttName%()\n&#xA;"/></DataRow><DataRow><Column name="TemplateID" value="{65963B95-E4DF-424a-8E1D-E5F9C25A0EBD}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Linked Class Base"/><Column name="Template" value="%linkParentName%"/></DataRow><DataRow><Column name="TemplateID" value="{D8A493C8-3113-48ac-9C89-3C60453E3D77}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Linked Class Interface"/><Column name="Template" value="%LinkedClassBase%"/></DataRow><DataRow><Column name="TemplateID" value="{A797F465-BCBE-47df-99EE-E72578AFBD17}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Operation"/><Column name="Template" value="%OperationDeclaration%&#xA;%OperationNotes%&#xA;%OperationBody%&#xA;"/></DataRow><DataRow><Column name="TemplateID" value="{889AB010-9127-43ea-9F4A-001E6254324D}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Operation Notes"/><Column name="Template" value="%PI=&quot;&quot;%&#xA;%if genOptGenComments != &quot;T&quot;%&#xA;%endTemplate%&#xA;$notes = %REPLACE(opNotes, &quot;\n&quot;, &quot;\n    &quot;)%&#xA;%if $notes != &quot;&quot;%&#xA;    %qt%%qt%%qt%&#xA;$notes = %WRAP_COMMENT($notes, genOptWrapComment, &quot;&quot;, &quot;    &quot;)%&#xA;%TRIM($notes)%\n&#xA;    %qt%%qt%%qt%&#xA;%endIf%&#xA;"/></DataRow><DataRow><Column name="TemplateID" value="{03306C64-E8EA-42f7-AA52-E8018EA91220}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Operation Declaration"/><Column name="Template" value="$dec=%REPLACE(opTag:&quot;decorators&quot;,&quot;@&quot;,&quot;\n@&quot;)%&#xA;%TRIM($dec)%&#xA;%PI=&quot; &quot;%&#xA;$params = %list=&quot;Parameter&quot; @separator=&quot;, &quot;%&#xA;def&#xA;%PI=&quot;&quot;%&#xA;%if opScope == &quot;Private&quot;%&#xA;__&#xA;%endIf%&#xA;%opName%&#xA;($params):&#xA;"/></DataRow><DataRow><Column name="TemplateID" value="{2804AD2E-D4A7-4c4f-9CDD-48B7CA471498}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Operation Body"/><Column name="Template" value="$behaviour = %WRAP_COMMENT(opBehaviour, &quot;40&quot;, &quot;    &quot;, &quot;# &quot;)%&#xA;%if $behaviour != &quot;&quot;%&#xA;$behaviour\n\n&#xA;%endIf%&#xA;    pass&#xA;"/></DataRow><DataRow><Column name="TemplateID" value="{49C106A9-3AA1-4c14-B451-0451A4393345}"/><Column name="TemplateType" value="Python36_Code_Template"/><Column name="TemplateName" value="Parameter"/><Column name="Template" value="%PI=&quot;&quot;%&#xA;%paramName%&#xA;%if paramDefault != &quot;&quot; and paramDefault != &quot;&lt;none&gt;&quot;%&#xA; = %paramDefault%&#xA;%endIf%&#xA;"/></DataRow></DataSet></RefData></CodeTemplates><CodeOptions><CodeOption name="Grammar"><![CDATA[// Grammar for Python
// Adapted to EA from here:
// https://docs.python.org/3.6/reference/grammar.html

caseSensitive();
delimiters(<DELIMITER>);
//tabSize(8);
lex(<TOKENS>);
parse(<proceed>, <languageEscape>);


// Tokens:
<DELIMITER>				::= "\n" | "\r" | "\t" |  " " |
						"~"  | "`"  | "!"  |  "@" |
						"#"  | "$"  | "%"  |  "^" |
						"&"  | "*"  | "("  | ")"  |
						"-"  | "+"  | "="  | "{"  |
						"["  | "}"  | "]"  | ";"  |
						":"  | "\\" | "\'" | "\"" |
						","  | "<"  | ">"  | "/"  |
						"?"  | "|"  | ".";

<WHITESPACE>			::= " " | "\t";
<NEWLINE>			::= "\r\n" | "\r" | "\n";
//<ENDMARKER>		::= skipEof();

<COMMENT>			::= "#" skip("\r\n" | "\n");

<STRING>			::= [<STRING_PREFIX>] <STRING_BODY>;
<STRING_PREFIX>			::= "r" | "u" | "ur" | "R" | "U" | "UR" | "Ur" | "uR";
<STRING_BODY>			::= "'''" skip("'''") "'''" | 
					"'" skip("'", "\\\'" | "\\\\") "'" |
					"\"\"\"" skip("\"\"\"") "\"\"\"" |
					"\"" skip("\"", "\\\"" | "\\\\") "\"";

<NAME>			::= ("a".."z" | "A".."Z" | "_") ("a".."z" | "0".."9" | "A".."Z" | "_")*;

<NUMBER>			::= <FLOAT_NUMBER> |
					<HEX_NUMBER> |
					<OCT_NUMBER> |
					<DEC_NUMBER>;
<HEX_NUMBER>		::= "0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+ ["l" | "L"];
<OCT_NUMBER>			::= "0" "0".."7"+ ["l" | "L"];
<DEC_NUMBER>			::= "0".."9"+ ["l" | "L"];
<FLOAT_NUMBER>	::= "0".."9"+ "." ["0".."9"+] [("e" | "E") ["+" | "-"] "0".."9"+] ["j" | "J"] |
		"." "0".."9"+ [("e" | "E") ["+" | "-"] "0".."9"+] ["j" | "J"] |
		"0".."9"+ ("e" | "E") ["+" | "-"] "0".."9"+ ["j" | "J"] |
		"0".."9"+ [("e" | "E") ["+" | "-"] "0".."9"+] ("j" | "J");

// new from Python 3.6
<ASYNC>			::= "async";
<AWAIT>			::= "await";


<TOKENS>								::= token(<WHITESPACE>) |
											token(<COMMENT>) |
											token(<NEWLINE>) |
											token(<NUMBER>) |
											token(<STRING>) |
											token(keywords()) |
											token(<NAME>);

// Rules
//<language>			::= node("FILE", <file_input>);
<proceed>           ::= <language>;
<language>			::= (<file_input>)*;
<languageEscape>				::= "\\" <S>* <NEWLINE>;

//<single_input>		::= <NEWLINE> | <simple_stmt> | <compound_stmt> <NEWLINE>;
//<file_input>		::= (<NEWLINE> | <stmt>)* <ENDMARKER>;
<file_input>		::= (<SC>* <NEWLINE> | <stmt>);
//<eval_input>		::= <testlist> (<NEWLINE>)* <ENDMARKER>;

<S>				::= <WHITESPACE>;
<SC>			::= <WHITESPACE> | 
					<COMMENT>;
<SL>            ::= <WHITESPACE> | <NEWLINE>;
<SCL>			::= <WHITESPACE> |
					<COMMENT> |
					<NEWLINE>;

<suite>			    ::= <simple_stmt>
                        | (<SC>* <NEWLINE>)+ indent() <stmt>
						  ((level() <stmt>)
							| <S>* <COMMENT> <NEWLINE>
							| <S>* <NEWLINE>
						  )*
						  [dedent()];

//<suite>			    ::= <simple_stmt>
//                        | (<SC>* <NEWLINE>)+ indent() <stmt>
//						  (level() <stmt>)*
//						  [dedent()];

<construct_suite>	::= <simple_stmt>
                        | (<SC>* <NEWLINE>)+ indent() (<self_assignment> | <stmt>) 
                            ( (level() (<self_assignment> | <stmt>))
								        | <S>* <COMMENT> <NEWLINE>
										| <S>* <NEWLINE>
					        )*
                           [dedent()];

<self_assignment>     ::= "self" "." node("ATTRIBUTE",
                                          attribute("NAME", <NAME> <S>*)
										  ":" <S>*
										  attribute("TYPE", <test>)
										  "=" <S>* attribute("DEFAULT", <test>)
										  
							<SC>* <NEWLINE>);

<classdef>		::= node("CLASS", node("DECLARATION", "class" <S>+ 
                                                      attribute("NAME", <NAME> <S>*)
													  ["(" <S>* [<arglist>] ")" <S>*] ":" <SC>*
									  )
								  node("BODY", <suite>)
					    );

<construct>     ::= "def" <S>+ "__init__" <S>* <construct_parameters> ":" <SC>* <construct_suite>;

<funcdef>		::= node("METHOD", node("DECLARATION", "def" <S>+
                                                       attribute("NAME", <NAME> <S>*)
								                       <parameters> ["->" <S>* <test>] ":" <SC>*
								       )
								   <suite>
						);



<decorator>			::= "@" <S>* <dotted_name> [ "(" <S>* [<arglist>] ")" <S>* ] <NEWLINE>;
<decorators>		::= (<decorator>)+;
<decorated>			::= <decorators> (<classdef> | <funcdef> | <async_funcdef>);

<async_funcdef>		::= <ASYNC> <funcdef>;

<parameters>		::= "(" <S>* [<typedargslist>] ")" <S>*;
<construct_parameters> ::=  "(" <S>* [<construct_typedargslist>] ")" <S>*;

<typedargslist>		::= (<S>* <tfpdef> <S>* ["=" <S>* <test> <S>*] ("," <S>* <tfpdef> <S>* ["=" <S>* <test> <S>*])* ["," <S>* [
                         "*" <S>* [<tfpdef>] ("," <S>* <tfpdef> ["=" <S>* <test>])* ["," <S>* ["**" <S>* <tfpdef> ["," <S>*]]]
                        | "**" <S>* <tfpdef> ["," <S>*]]]
                        | "*" <S>* [<tfpdef>] ("," <S>* <tfpdef> ["=" <S>* <test>])* ["," <S>* ["**" <S>* <tfpdef> ["," <S>*]]]
                        | "**" <S>* <tfpdef> ["," <S>*]);
<construct_typedargslist>		::= (<S>* <c_tfpdef> <S>* ["=" <S>* <test> <S>*] ("," <S>* <c_tfpdef> <S>* ["=" <S>* <test> <S>*])* ["," <S>* [
                         "*" <S>* [<c_tfpdef>] ("," <S>* <c_tfpdef> ["=" <S>* <test>])* ["," <S>* ["**" <S>* <c_tfpdef> ["," <S>*]]]
                        | "**" <S>* <c_tfpdef> ["," <S>*]]]
                        | "*" <S>* [<c_tfpdef>] ("," <S>* <c_tfpdef> ["=" <S>* <test>])* ["," <S>* ["**" <S>* <c_tfpdef> ["," <S>*]]]
                        | "**" <S>* <c_tfpdef> ["," <S>*]);

<tfpdef>			::= "self" <S>* | node("PARAMETER", attribute("NAME", <NAME> <S>*) [":" <S>* attribute("TYPE", <test>)]);
//<tfpdef>			::= node("PARAMETER", attribute("NAME", <NAME> <S>*) [":" <S>* attribute("TYPE", <test>)]);
<c_tfpdef>			::= "self" <S>* | <NAME> <S>* [":" <S>* <test>];

<varargslist>		::= (<vfpdef> ["=" <S>* <test>] ("," <S>* <vfpdef> ["=" <S>* <test>])* ["," <S>* [
        "*" <S>* [<vfpdef>] ("," <S>* <vfpdef> ["=" <S>* <test>])* ["," <S>* ["**" <S>* <vfpdef> ["," <S>*]]]
      | "**" <S>* <vfpdef> ["," <S>*]]]
  | "*" <S>* [<vfpdef>] ("," <S>* <vfpdef> ["=" <S>* <test>])* ["," <S>* ["**" <S>* <vfpdef> ["," <S>*]]]
  | "**" <S>* <vfpdef> ["," <S>*]
);
<vfpdef>			::= <NAME> <S>* ;

//<stmt>				::= <S>* <COMMENT> <NEWLINE> | <simple_stmt> | <compound_stmt>;
<stmt>				::= <SC>* <NEWLINE> | <simple_stmt> | <compound_stmt>;
<simple_stmt>		::= <small_stmt> (";" <S>* <small_stmt>)* [";"] <SC>* <NEWLINE>;
<small_stmt>		::= (//<self_assign> |
                         <expr_stmt>
                         | <del_stmt>
						 | <pass_stmt>
						 | <flow_stmt>
						 | <import_stmt>
						 | <global_stmt>
						 | <nonlocal_stmt>
						 | <assert_stmt>
						);

//<self_assign>       ::= node("ATTRIBUTE", "self" <S>* "." <S>* attribute("NAME", <NAME>) <S>* ":" <S>* <test> ["=" <S>* <test>]);

<expr_stmt>			::= <testlist_star_expr> <S>* (<annassign> | <augassign> (<yield_expr> | <testlist>) |
                     ("=" <S>* (<yield_expr> | <testlist_star_expr>))*);
<annassign>			::= ":" <S>* <test> ["=" <S>* <test>];


<testlist_star_expr>		::= (<test> | <star_expr>) ("," <S>* (<test>|<star_expr>))* ["," <S>*];
<augassign>			::= ("+=" | "-=" | "*=" | "@=" | "/=" | "%=" | "&=" | "|=" | "^=" |
                        "<<=" | ">>=" | "**=" | "//=") <S>*;
// For normal and annotated assignments, additional restrictions enforced by the interpreter
<del_stmt>			::= "del" <S>* <exprlist>;
<pass_stmt>			::= "pass" <S>*;
<flow_stmt>			::= <break_stmt> | <continue_stmt> | <return_stmt> | <raise_stmt> | <yield_stmt>;
<break_stmt>		::= "break" <S>*;
<continue_stmt>		::= "continue" <S>*;
<return_stmt>		::= "return" <S>* [<testlist>];
<yield_stmt>		::= <yield_expr>;
<raise_stmt>		::= "raise" <S>* [<test> ["from" <S>* <test>]];
<import_stmt>		::= <import_name> | <import_from>;
<import_name>		::= "import" <S>+ <dotted_as_names>;
// note below: the ("." | "...") is necessary because "..." is tokenized as ELLIPSIS
<import_from>		::= ("from" <S>+ (("." | "...")* <S>* <dotted_name> | ("." | "...")+ <S>*)
                         "import" <S>+ ("*" <S>* | "(" <S>* <import_as_names> ")" <S>* | <import_as_names>));
<import_as_name>	::= <NAME> <S>*  ["as" <S>+ <NAME> <S>* ];
<dotted_as_name>	::= <dotted_name> ["as" <S>+ <NAME> <S>* ];
<import_as_names>	::= <import_as_name> ("," <SL>* <import_as_name>)* ["," <S>*];
<dotted_as_names>	::= <dotted_as_name> ("," <S>* <dotted_as_name>)*;
<dotted_name>		::= <NAME> <S>*  ("." <S>* <NAME> <S>* )*;

//<selfed_name>       ::= "self" <S>* "." <S>* <NAME> <S>* ;

<global_stmt>		::= "global" <S>* <NAME> <S>*  ("," <S>* <NAME> <S>* )*;
<nonlocal_stmt>		::= "nonlocal" <S>* <NAME> <S>*  ("," <S>* <NAME> <S>* )*;
<assert_stmt>		::= "assert" <S>* <test> ["," <S>* <test>];

<compound_stmt>		::= <if_stmt>
                        | <while_stmt>
						| <for_stmt>
						| <try_stmt>
						| <with_stmt>
						| <construct>
						| <funcdef>
						| <classdef>
						| <decorated>
						| <async_stmt>;
<async_stmt>		::= <ASYNC> (<funcdef> | <with_stmt> | <for_stmt>);
<if_stmt>			::= "if" <S>+ <test> ":" <S>* <suite> (level() "elif" <S>+ <test> ":" <SC>* <suite>)* [level() "else" ":" <SC>* <suite>];
<while_stmt>		::= "while" <S>* <test> ":" <SC>* <suite> [level() "else" <S>* ":" <SC>* <suite>];
<for_stmt>			::= "for" <S>* <exprlist> "in" <S>* <testlist> ":" <SC>* <suite> [level() "else" <S>* ":" <SC>* <suite>];
<try_stmt>			::= ("try" <S>* ":" <SC>* <suite>
						((<except_clause> ":" <SC>* <suite>)+
						["else" <S>* ":" <SC>* <suite>]
						["finally" <S>* ":" <SC>* <suite>] |
						"finally" <S>* ":" <S>* <suite>));
<with_stmt>			::= "with" <S>* <with_item> ("," <S>* <with_item>)*  ":" <S>* <suite>;
<with_item>			::= <test> ["as" <S>* <expr>];
// NB compile.c makes sure that the default except clause is last
<except_clause>		::= "except" <S>* [<test> ["as" <S>* <NAME> <S>* ]];


<test>				::= <or_test> ["if" <S>* <or_test> "else" <S>* <test>] | <lambdef>;
<test_nocond>		::= <or_test> | <lambdef_nocond>;
<lambdef>			::= "lambda" <S>* [<varargslist>] ":" <S>* <test>;
<lambdef_nocond>		::= "lambda" <S>* [<varargslist>] ":" <S>* <test_nocond>;
<or_test>			::= <and_test> ("or" <S>* <and_test>)*;
<and_test>			::= <not_test> ("and" <S>* <not_test>)*;
<not_test>			::= "not" <S>* <not_test> | <comparison>;
<comparison>		::= <expr> (<comp_op> <expr>)*;
// <> isn"t actually a valid comparison operator in Python. It"s here for the
// sake of a __future__ import described in PEP 401 (which really works :-)
<comp_op>			::= "<" <S>* |">" <S>* |"==" <S>* |">=" <S>* | "<=" <S>* | "<>" <S>* | "!=" <S>* | "in" <S>*
                        | "not" <S>* "in" <S>* | "is" <S>* | "is" <S>* "not" <S>*;
<star_expr>			::= "*" <S>* <expr>;
<expr>				::= <xor_expr> ("|" <S>* <xor_expr>)*;
<xor_expr>			::= <and_expr> ("^" <S>* <and_expr>)*;
<and_expr>			::= <shift_expr> ("&" <S>* <shift_expr>)*;
<shift_expr>		::= <arith_expr> (("<<" <S>* | ">>" <S>*) <arith_expr>)*;
<arith_expr>		::= <term> (("+" <S>* |"-" <S>*) <term>)*;
<term>				::= <factor> (("*" <S>* | "@" <S>* | "/" <S>* | "%" <S>* | "//" <S>*) <factor>)*;
<factor>			::= ( "+" <S>* | "-" <S>* | "~" <S>*) <factor> | <power>;
<power>		::= <atom_expr> ["**" <S>* <factor>];
<atom_expr>		::= [<AWAIT>] <atom> (<SL>* <trailer>)*;
<atom>		::= ("(" <S>* [<yield_expr> | <testlist_comp>] ")" <S>*
                 | "[" <S>* [<testlist_comp>] "]" <S>* 
				 | "{" <S>* [<dictorsetmaker>] "}" <S>* 
				 | "self" <S>*
				 | <NAME> <S>* 
				 | <NUMBER> <S>* 
				 | (<STRING> <S>* )+
				 | "..." <S>* 
				 | "None" <S>* 
				 | "True" <S>* 
				 | "False" <S>*);
<testlist_comp>		::= (<test> | <star_expr>) ( <comp_for> | ("," <SCL>* (<test> | <star_expr>))* ["," <SCL>*] );
<trailer>		::= "(" <SL>* [<arglist>] ")" <S>*
                    | "[" <SL>* <subscriptlist> "]" <S>*
					| "." <S>* <NAME> <S>* ;

<arglist>		::= <argument> ("," <SCL>* <argument>)*  [("," | <SCL>*)];
<subscriptlist>		::= <subscript> ("," <SCL>* <subscript>)* [("," | <SCL>*)];
<subscript>		::= <test> | [<test>] ":" <S>* [<test>] [<sliceop>];
<sliceop>		::= ":" <S>* [<test>];
<exprlist>		::= (<expr> | <star_expr>) ("," <S>* (<expr> | <star_expr>))* ["," <S>*];
<testlist>		::= <test> ("," <S>* <test>)* ["," <S>*];
<dictorsetmaker>		::= ( ((<test> ":" <S>* <test> | "**" <S>* <expr>)
                   (<comp_for> | ("," <S>* (<test> ":" <S>* <test> | "**" <S>* <expr>))* ["," <S>*])) |
                  ((<test> | <star_expr>)
                   (<comp_for> | ("," <S>* (<test> | <star_expr>))* ["," <S>*])) );



// The reason that keywords are test nodes instead of NAME is that using NAME
// results in an ambiguity. ast.c makes sure it"s a NAME.
// "test "=" test" is really "keyword "=" test", but we have no such token.
// These need to be in a single rule to avoid grammar that is ambiguous
// to our LL(1) parser. Even though "test" includes "*expr" in star_expr,
// we explicitly match "*" here, too, to give it proper precedence.
// Illegal combinations and orderings are blocked in ast.c:
// multiple (test comp_for) arguments are blocked; keyword unpackings
// that precede iterable unpackings are blocked; etc.
<argument>		::= <test> [(<comp_for> | "=" <S>* <test>)]
					| ("**" | "*") <S>* <test>;
//					| ("*" <S>* <test>);

<comp_iter>		::= <comp_for> | <comp_if>;
<comp_for>		::= [<ASYNC>] "for" <S>* <exprlist> "in" <S>* <or_test> [<comp_iter>];
<comp_if>		::= "if" <S>* <test_nocond> [<comp_iter>];

// not used in grammar, but may appear in "node" passed from Parser to Compiler
//<encoding_decl>		::= <NAME>;

<yield_expr>		::= "yield" <S>* [<yield_arg>];
<yield_arg>		::= "from" <S>* <test> | <testlist>;
]]></CodeOption></CodeOptions></CodeModule></CodeModules></MDG.Technology>
